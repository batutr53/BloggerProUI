@model BloggerProUI.Models.Post.PostDetailDto
@{
    ViewData["Title"] = Model?.Title ?? "Blog Detayƒ±";
    var isAuthenticated = User.Identity.IsAuthenticated;
    
    // SEO Meta Tags
    if (Model != null)
    {
        ViewData["Description"] = !string.IsNullOrEmpty(Model.Excerpt) ? Model.Excerpt : Model.Title + " - insanlikHallerimiz blog yazƒ± sƒ±";
        ViewData["Keywords"] = Model.Tags != null && Model.Tags.Any() ? string.Join(", ", Model.Tags) + ", blog, makale" : "blog, makale, insanlik hallerimiz";
        ViewData["Author"] = Model.AuthorName ?? "insanlikHallerimiz";
        ViewData["CanonicalUrl"] = $"{Context.Request.Scheme}://{Context.Request.Host}/Blog/{Model.Slug}";
        
        // Open Graph
        ViewData["OgTitle"] = Model.Title;
        ViewData["OgDescription"] = !string.IsNullOrEmpty(Model.Excerpt) ? Model.Excerpt : Model.Title;
        ViewData["OgImage"] = !string.IsNullOrEmpty(Model.FeaturedImage) ? Model.FeaturedImage : $"{Context.Request.Scheme}://{Context.Request.Host}/images/og-default.jpg";
        ViewData["OgType"] = "article";
        ViewData["OgUrl"] = $"{Context.Request.Scheme}://{Context.Request.Host}/Blog/{Model.Slug}";
        
        // Twitter
        ViewData["TwitterTitle"] = Model.Title;
        ViewData["TwitterDescription"] = !string.IsNullOrEmpty(Model.Excerpt) ? Model.Excerpt : Model.Title;
        ViewData["TwitterImage"] = !string.IsNullOrEmpty(Model.FeaturedImage) ? Model.FeaturedImage : $"{Context.Request.Scheme}://{Context.Request.Host}/images/og-default.jpg";
        
        // Article meta
        ViewData["ArticlePublishedTime"] = (Model.PublishDate ?? Model.CreatedAt).ToString("yyyy-MM-ddTHH:mm:ssZ");
        if (Model.LastModified.HasValue)
        {
            ViewData["ArticleModifiedTime"] = Model.LastModified.Value.ToString("yyyy-MM-ddTHH:mm:ssZ");
        }
        ViewData["ArticleAuthor"] = Model.AuthorName ?? "insanlikHallerimiz";
        ViewData["ArticleSection"] = Model.Categories?.FirstOrDefault() ?? "Genel";
        ViewData["ArticleTags"] = Model.Tags?.ToList() ?? new List<string>();
        
        // Structured Data will be added via JavaScript to avoid compilation issues
        ViewData["HasStructuredData"] = "true";
    }
}
@if (Model == null)
{
    <main class="content-container" style="text-align: center; padding: 60px 20px;">
        <h1>Yazƒ± Bulunamadƒ±</h1>
        <p>Aradƒ±ƒüƒ±nƒ±z blog yazƒ±sƒ± bulunamadƒ± veya kaldƒ±rƒ±lmƒ±≈ü olabilir.</p>
        <div style="margin-top: 30px;">
            <a href="@Url.Action("Index", "Blog")" class="btn" style="background: #333; color: #fff; padding: 12px 24px; text-decoration: none; border-radius: 4px;">
                T√ºm Yazƒ±lara D√∂n
            </a>
        </div>
    </main>
}
else
{

<!-- Breadcrumb Navigation -->
<nav aria-label="breadcrumb" class="breadcrumb-nav">
    <div class="container">
        <ol class="breadcrumb">
            <li class="breadcrumb-item home-item"><a href="/">Ana Sayfa</a></li>
            <li class="breadcrumb-item"><a href="/Blog">Blog</a></li>
            @if (Model?.Categories != null && Model.Categories.Any())
            {
                <li class="breadcrumb-item category-item"><a href="/Blog?category=@Uri.EscapeDataString(Model.Categories.First())">@Model.Categories.First()</a></li>
            }
            <li class="breadcrumb-item post-item active" aria-current="page" title="@(Model?.Title ?? "Blog Yazƒ± sƒ±")">@(Model?.Title ?? "Blog Yazƒ± sƒ±")</li>
        </ol>
    </div>
</nav>

<!-- Main Article Container -->
<main class="article-container">
    <!-- Article Content -->
    <article class="article-content">
        <!-- Article Header -->
        <header class="article-header">
            <div class="article-meta">
                @if (Model?.Categories != null && Model.Categories.Any())
                {
                    @string.Join(", ", Model.Categories).ToUpper()
                }
                else
                {
                    <text>GENEL</text>
                }
                ¬∑ @(Model?.PublishDate?.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("tr-TR")) ?? Model?.CreatedAt.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("tr-TR")) ?? DateTime.Now.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("tr-TR")))
            </div>
            <h1 class="article-title">@(Model?.Title ?? "Blog Yazƒ±sƒ±")</h1>
            <div class="article-author">Yazan: @(Model?.AuthorName?.ToUpper() ?? "Bƒ∞Lƒ∞NMEYEN")</div>
            
            @if (Model != null)
            {
                <div class="article-stats" style="margin-top: 15px; color: #999; font-size: 14px; display: flex; gap: 20px; flex-wrap: wrap;">
                    <span title="G√∂r√ºnt√ºlenme sayƒ±sƒ±">üëÅ @Model.ViewCount</span>
                    <span title="Beƒüeni sayƒ±sƒ±">‚ù§Ô∏è @Model.LikeCount</span>
                    <span title="Yorum sayƒ±sƒ±">üí¨ @Model.CommentCount</span>
                    @if (Model.AverageRating.HasValue && Model.AverageRating > 0)
                    {
                        <span title="Ortalama puan">‚≠ê @Model.AverageRating.Value.ToString("F1")</span>
                    }
                    <span id="reading-time-display" title="Tahmini okuma s√ºresi">üìñ <span id="reading-time-value">0</span> dk</span>
                    <span id="word-count-display" title="Kelime sayƒ±sƒ±">üìù <span id="word-count-value">0</span> kelime</span>
                </div>
            }
        </header>

        <!-- Main Article Image -->
        @if (!string.IsNullOrEmpty(Model?.FeaturedImage))
        {
            <img src="@Model.FeaturedImage" alt="@Model.Title" class="article-image" loading="lazy">
            <div class="image-caption">
                @Model.Title
            </div>
        }
        else
        {
            <img src="https://images.unsplash.com/photo-1494790108755-2616c9a7aaa0?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80" alt="@(Model?.Title ?? "Blog Yazƒ±sƒ±")" class="article-image" loading="lazy">
            <div class="image-caption">
                @(Model?.Title ?? "Blog Yazƒ±sƒ±")
            </div>
        }

        <!-- Article Text -->
        <div class="article-text">
            @if (!string.IsNullOrEmpty(Model?.Content))
            {
                @Html.Raw(Model.Content)
            }
            else
            {
                <div class="no-content" style="text-align: center; padding: 40px 20px; color: #666;">
                    <h3>ƒ∞√ßerik bulunamadƒ±</h3>
                    <p>Bu yazƒ±nƒ±n i√ßeriƒüi hen√ºz y√ºklenmemi≈ü veya mevcut deƒüil.</p>
                </div>
            }
        </div>

        <!-- Post Modules (Dynamic Content) -->
        @if (Model?.Modules != null && Model.Modules.Any())
        {
            @foreach (var module in Model.Modules.OrderBy(m => m.SortOrder))
            {
                @switch (module.Type)
                {
                    case BloggerProUI.Models.Enums.PostModuleType.Paragraph:
                        <div class="article-text">
                            @if (!string.IsNullOrEmpty(module.Content))
                            {
                                @Html.Raw(module.Content)
                            }
                        </div>
                        break;

                    case BloggerProUI.Models.Enums.PostModuleType.Heading:
                        <div class="article-heading" style="margin: 30px 0 20px 0;">
                            @if (!string.IsNullOrEmpty(module.Content))
                            {
                                <h2 style="font-size: 28px; font-weight: 600; color: #333;">@Html.Raw(module.Content)</h2>
                            }
                        </div>
                        break;

                    case BloggerProUI.Models.Enums.PostModuleType.Image:
                        <div class="content-with-image" style="margin: 30px 0;">
                            @if (!string.IsNullOrEmpty(module.MediaUrl))
                            {
                                <img src="@module.MediaUrl" alt="@(Model.Title)" class="content-image" loading="lazy">
                            }
                            @if (!string.IsNullOrEmpty(module.Content))
                            {
                                <div class="image-caption" style="margin-top: 10px; color: #666; font-size: 14px; text-align: center;">
                                    @Html.Raw(module.Content)
                                </div>
                            }
                        </div>
                        break;

                    case BloggerProUI.Models.Enums.PostModuleType.Quote:
                        <blockquote class="article-quote" style="margin: 30px 0; padding: 20px 30px; border-left: 4px solid #333; background: #f9f9f9; font-style: italic; font-size: 18px;">
                            @if (!string.IsNullOrEmpty(module.Content))
                            {
                                @Html.Raw(module.Content)
                            }
                        </blockquote>
                        break;

                    case BloggerProUI.Models.Enums.PostModuleType.Video:
                        <div class="video-container" style="margin: 30px 0; text-align: center;">
                            @if (!string.IsNullOrEmpty(module.MediaUrl))
                            {
                                <video controls style="max-width: 100%; height: auto; border-radius: 8px;">
                                    <source src="@module.MediaUrl" type="video/mp4">
                                    Tarayƒ±cƒ±nƒ±z video oynatmayƒ± desteklemiyor.
                                </video>
                            }
                            @if (!string.IsNullOrEmpty(module.Content))
                            {
                                <div class="video-caption" style="margin-top: 10px; color: #666; font-size: 14px;">
                                    @Html.Raw(module.Content)
                                </div>
                            }
                        </div>
                        break;

                    case BloggerProUI.Models.Enums.PostModuleType.IFrame:
                        <div class="iframe-container" style="margin: 30px 0;">
                            @if (!string.IsNullOrEmpty(module.MediaUrl))
                            {
                                <iframe src="@module.MediaUrl" style="width: 100%; height: 400px; border: none; border-radius: 8px;" loading="lazy"></iframe>
                            }
                            @if (!string.IsNullOrEmpty(module.Content))
                            {
                                <div class="iframe-caption" style="margin-top: 10px; color: #666; font-size: 14px; text-align: center;">
                                    @Html.Raw(module.Content)
                                </div>
                            }
                        </div>
                        break;

                    default:
                        <div class="custom-module" style="margin: 20px 0;">
                            @if (!string.IsNullOrEmpty(module.Content))
                            {
                                @Html.Raw(module.Content)
                            }
                        </div>
                        break;
                }
            }
        }

        <!-- Share Section -->
        <div class="share-section">
            <h3 class="share-title">Bu makaleyi payla≈ü</h3>
            <div class="share-buttons">
                <a href="https://twitter.com/intent/tweet?text=@(Uri.EscapeDataString(Model?.Title ?? "BloggerPro"))&url=@(Uri.EscapeDataString(Context.Request.Scheme + "://" + Context.Request.Host + Context.Request.Path))" 
                   target="_blank" class="share-btn" data-platform="twitter"><i class="fab fa-twitter"></i></a>
                <a href="https://www.facebook.com/sharer/sharer.php?u=@(Uri.EscapeDataString(Context.Request.Scheme + "://" + Context.Request.Host + Context.Request.Path))" 
                   target="_blank" class="share-btn" data-platform="facebook"><i class="fab fa-facebook-f"></i></a>
                <a href="https://www.linkedin.com/sharing/share-offsite/?url=@(Uri.EscapeDataString(Context.Request.Scheme + "://" + Context.Request.Host + Context.Request.Path))" 
                   target="_blank" class="share-btn" data-platform="linkedin"><i class="fab fa-linkedin-in"></i></a>
                <a href="#" class="share-btn" onclick="copyToClipboard('@(Context.Request.Scheme)://@(Context.Request.Host)@(Context.Request.Path)'); return false;"><i class="fas fa-link"></i></a>
            </div>
        </div>

        <!-- Post Interaction -->
        @if (Model != null)
        {
            <div class="post-interaction" style="margin: 30px 0; padding: 20px; background: #f9f9f9; border-radius: 8px;">
                <div class="interaction-stats" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                    <div class="stats-left">
                        <span style="margin-right: 20px;">üëÅ @Model.ViewCount g√∂r√ºnt√ºlenme</span>
                        <span style="margin-right: 20px;">‚ù§Ô∏è @Model.LikeCount beƒüeni</span>
                        <span>üí¨ @Model.CommentCount yorum</span>
                    </div>
                    @if (Model.AverageRating.HasValue && Model.AverageRating > 0)
                    {
                        <div class="rating-display">
                            <span>‚≠ê @Model.AverageRating.Value.ToString("F1")</span>
                        </div>
                    }
                </div>
                
                <div class="interaction-buttons" style="display: flex; gap: 10px;">
                    <button class="like-btn @(Model.IsLikedByCurrentUser == true ? "liked" : "")" 
                            onclick="toggleLike('@Model.Id')" 
                            style="background: @(Model.IsLikedByCurrentUser == true ? "#e74c3c" : "#fff"); color: @(Model.IsLikedByCurrentUser == true ? "#fff" : "#333"); border: 2px solid #e74c3c; padding: 8px 16px; border-radius: 4px; cursor: pointer;">
                        ‚ù§Ô∏è @(Model.IsLikedByCurrentUser == true ? "Beƒüenildi" : "Beƒüen")
                    </button>
                    
                    <button id="bookmark-btn" 
                            onclick="toggleBookmark('@Model.Id')" 
                            style="background: #fff; color: #333; border: 2px solid #f39c12; padding: 8px 16px; border-radius: 4px; cursor: pointer; margin-left: 10px;">
                        <span id="bookmark-icon">üîñ</span> <span id="bookmark-text">Favorilere Ekle</span>
                    </button>
                    
                    @if (Model.AllowComments)
                    {
                        <button onclick="scrollToComments()" style="background: #fff; color: #333; border: 2px solid #333; padding: 8px 16px; border-radius: 4px; cursor: pointer;">
                            üí¨ Yorum Yap
                        </button>
                    }
                </div>
            </div>
        }

        <!-- Tags -->
        <div class="tags-section">
            <h3 class="section-title">Etiketler</h3>
            <div class="tags">
                @if (Model?.Tags != null && Model.Tags.Any())
                {
                    @foreach (var tag in Model.Tags)
                    {
                        <a href="#" class="tag">@tag</a>
                    }
                }
                else
                {
                    <span class="tag" style="background: #f0f0f0; color: #999;">Etiket bulunmuyor</span>
                }
            </div>
        </div>

        <!-- Author Box -->
        <div class="author-box">
            <div class="author-info">
                <img src="@(!string.IsNullOrEmpty(Model?.AuthorAvatar) ? Model.AuthorAvatar : "https://images.unsplash.com/photo-1494790108755-2616c9a7aaa0?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&q=80")" 
                     alt="@(Model?.AuthorName ?? "Yazar")" class="author-avatar" loading="lazy">
                <div class="author-details">
                    <h4>@(Model?.AuthorName ?? "Bilinmeyen Yazar")</h4>
                    <p>
                        @if (!string.IsNullOrEmpty(Model?.AuthorName))
                        {
                            <text>@Model.AuthorName tarafƒ±ndan yazƒ±lmƒ±≈ü makaleler ve g√∂r√º≈üler.</text>
                        }
                        else
                        {
                            <text>BloggerPro ekibinden kaliteli i√ßerikler.</text>
                        }
                    </p>
                    @if (Model != null)
                    {
                        <div class="author-stats" style="margin-top: 10px; font-size: 14px; color: #666;">
                            <span>Yayƒ±n Tarihi: @(Model.PublishDate?.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("tr-TR")) ?? Model.CreatedAt.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("tr-TR")))</span>
                            @if (Model.LastModified.HasValue)
                            {
                                <br><span>Son G√ºncelleme: @Model.LastModified.Value.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("tr-TR"))</span>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Comments Section -->
        <section id="comments-section" class="comments-section" style="margin: 40px 0;">
            <h2>Yorumlar (@(ViewBag.Comments != null ? ((List<BloggerProUI.Models.Comment.CommentListDto>)ViewBag.Comments).Count : 0))</h2>
            
            @if (Model?.AllowComments == true)
            {
                <!-- Add Comment Form -->
                <div class="add-comment-form" style="margin: 30px 0; padding: 20px; background: #f9f9f9; border-radius: 8px;">
                    <h3>Yorum Yap</h3>
                    <form id="commentForm">
                        <div class="form-group" style="margin-bottom: 15px;">
                            <label for="commentContent">Yorumunuz:</label>
                            <textarea id="commentContent" name="content" rows="4" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px;" placeholder="Yorumunuzu buraya yazƒ±n..."></textarea>
                        </div>
                        <button type="submit" style="background: #333; color: #fff; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer;">
                            Yorum Ekle
                        </button>
                    </form>
                </div>
            }
            
            <!-- Comments List -->
            <div class="comments-list">
                @if (ViewBag.Comments != null)
                {
                    var comments = ViewBag.Comments as List<BloggerProUI.Models.Comment.CommentListDto>;
                    if (comments != null && comments.Any())
                    {
                        @foreach (var comment in comments)
                        {
                            <div class="comment" style="margin: 20px 0; padding: 20px; border: 1px solid #eee; border-radius: 8px;">
                                <div class="comment-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                                    <div class="comment-author" style="font-weight: bold; color: #333;">
                                        @comment.Username
                                    </div>
                                    <div class="comment-date" style="color: #666; font-size: 14px;">
                                        @comment.CreatedAt.ToString("dd MMMM yyyy HH:mm")
                                    </div>
                                </div>
                                <div class="comment-content" style="margin: 10px 0; line-height: 1.5;">
                                    @comment.Content
                                </div>
                                <div class="comment-actions" style="display: flex; gap: 10px; margin-top: 10px;">
                                    <button class="comment-like-btn" onclick="likeComment('@comment.Id')" data-comment-id="@comment.Id" data-liked="@(comment.HasLiked ? "true" : "false")" style="background: none; border: none; color: @(comment.HasLiked ? "#ff4757" : "#666"); cursor: pointer;">
                                        @(comment.HasLiked ? "‚ù§Ô∏è" : "ü§ç") @comment.LikeCount
                                    </button>
                                    <button class="comment-reply-btn" onclick="replyToComment('@comment.Id')" style="background: none; border: none; color: #666; cursor: pointer;">
                                        üí¨ Yanƒ±tla
                                    </button>
                                </div>
                                
                                <!-- Reply Form (Initially Hidden) -->
                                <div id="replyForm_@comment.Id" class="reply-form" style="display: none; margin-top: 15px; padding: 15px; background: #f5f5f5; border-radius: 4px;">
                                    <textarea id="replyContent_@comment.Id" rows="3" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" placeholder="Yanƒ±tƒ±nƒ±zƒ± yazƒ±n..."></textarea>
                                    <div style="margin-top: 10px;">
                                        <button onclick="submitReply('@comment.Id')" style="background: #333; color: #fff; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; margin-right: 10px;">
                                            Yanƒ±tla
                                        </button>
                                        <button onclick="cancelReply('@comment.Id')" style="background: #ccc; color: #333; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;">
                                            ƒ∞ptal
                                        </button>
                                    </div>
                                </div>
                                
                                <!-- Replies -->
                                @if (comment.Replies != null && comment.Replies.Any())
                                {
                                    <div class="replies" style="margin-top: 15px; padding-left: 20px; border-left: 2px solid #eee;">
                                        @foreach (var reply in comment.Replies)
                                        {
                                            <div class="reply" style="margin: 15px 0; padding: 15px; background: #f8f8f8; border-radius: 6px;">
                                                <div class="reply-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                                    <div class="reply-author" style="font-weight: bold; color: #333; font-size: 14px;">
                                                        @reply.Username
                                                    </div>
                                                    <div class="reply-date" style="color: #666; font-size: 12px;">
                                                        @reply.CreatedAt.ToString("dd MMMM yyyy HH:mm")
                                                    </div>
                                                </div>
                                                <div class="reply-content" style="margin: 8px 0; line-height: 1.5; font-size: 14px;">
                                                    @reply.Content
                                                </div>
                                                <div class="reply-actions" style="margin-top: 8px;">
                                                    <button class="reply-like-btn" onclick="likeComment('@reply.Id')" data-comment-id="@reply.Id" data-liked="@(reply.HasLiked ? "true" : "false")" style="background: none; border: none; color: @(reply.HasLiked ? "#ff4757" : "#666"); cursor: pointer; font-size: 12px;">
                                                        @(reply.HasLiked ? "‚ù§Ô∏è" : "ü§ç") @reply.LikeCount
                                                    </button>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <div class="no-comments" style="text-align: center; padding: 40px; color: #666;">
                            <p>Hen√ºz yorum bulunmamaktadƒ±r.</p>
                            @if (Model?.AllowComments == true)
                            {
                                <p>ƒ∞lk yorumu siz yapƒ±n!</p>
                            }
                        </div>
                    }
                }
            </div>
        </section>
    </article>

    <!-- Sidebar -->
    <aside class="sidebar">
        <!-- Related Articles -->
        <div class="sidebar-section">
            <h3 class="sidebar-title">ƒ∞lgili Yazƒ±lar</h3>
            
            @if (ViewBag.RelatedPosts != null)
            {
                var relatedPosts = ViewBag.RelatedPosts as List<BloggerProUI.Models.Post.PostListDto>;
                if (relatedPosts != null && relatedPosts.Any())
                {
                    @foreach (var post in relatedPosts)
                    {
                        <a href="@Url.Action("Detail", "Blog", new { slug = post.Slug })" class="related-article">
                            <img src="@(string.IsNullOrEmpty(post.FeaturedImage) ? "https://images.unsplash.com/photo-1502920917128-1aa500764cbd?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&q=80" : post.FeaturedImage)" alt="@post.Title" class="related-image" loading="lazy">
                            <div class="related-meta">@post.Categories?.FirstOrDefault()?.ToUpper() ¬∑ @post.CreatedAt.ToString("dd MMMM yyyy")</div>
                            <h4 class="related-title">@post.Title</h4>
                            <div class="related-author">Yazan: @post.Author?.DisplayName?.ToUpper()</div>
                        </a>
                    }
                }
            }
            
        </div>

        <!-- Popular Tags -->
        <div class="sidebar-section">
            <h3 class="sidebar-title">Pop√ºler Etiketler</h3>
            <div class="tags">
                @if (ViewBag.AllTags != null)
                {
                    var allTags = ViewBag.AllTags as List<BloggerProUI.Models.Tag.TagDto>;
                    if (allTags != null && allTags.Any())
                    {
                        @foreach (var tag in allTags)
                        {
                            <a href="@Url.Action("Index", "Blog", new { tag = tag.Name })" class="tag">@tag.Name</a>
                        }
                    }
                    else
                    {
                        <span class="tag" style="background: #f0f0f0; color: #999;">Etiket bulunmamaktadƒ±r</span>
                    }
                }
             
            </div>
        </div>
    </aside>
</main>

<!-- jQuery CDN -->
<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>

<!-- SweetAlert2 for notifications -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Reading Time and Content Analytics -->
<script src="~/js/reading-time.js" asp-append-version="true"></script>

<script>
    var isUserAuthenticated = @(isAuthenticated.ToString().ToLower());
    
// Check bookmark status on page load
document.addEventListener('DOMContentLoaded', function() {
    if (isUserAuthenticated) {
        checkBookmarkStatus('@Model?.Id');
    }
});

// Bookmark functionality
async function toggleBookmark(postId) {
    if (!isUserAuthenticated) {
        Swal.fire({
            title: 'Giri≈ü Yapmanƒ±z Gerekiyor',
            text: 'Favorilere eklemek i√ßin l√ºtfen giri≈ü yapƒ±n.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Giri≈ü Yap',
            cancelButtonText: 'ƒ∞ptal'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '/Auth/Login';
            }
        });
        return;
    }

    const bookmarkBtn = document.getElementById('bookmark-btn');
    const bookmarkIcon = document.getElementById('bookmark-icon');
    const bookmarkText = document.getElementById('bookmark-text');
    
    const isBookmarked = bookmarkBtn.classList.contains('bookmarked');
    
    try {
        let response;
        if (isBookmarked) {
            response = await fetch(`/Blog/RemoveBookmark/${postId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
        } else {
            response = await fetch('/Blog/AddBookmark', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    postId: postId,
                    notes: null
                })
            });
        }
        
        if (response.ok) {
            if (isBookmarked) {
                bookmarkBtn.classList.remove('bookmarked');
                bookmarkBtn.style.background = '#fff';
                bookmarkBtn.style.color = '#333';
                bookmarkIcon.textContent = 'üîñ';
                bookmarkText.textContent = 'Favorilere Ekle';
                
                Swal.fire({
                    title: 'Ba≈üarƒ±lƒ±!',
                    text: 'Yazƒ± favorilerden kaldƒ±rƒ±ldƒ±.',
                    icon: 'success',
                    timer: 1500,
                    showConfirmButton: false
                });
            } else {
                bookmarkBtn.classList.add('bookmarked');
                bookmarkBtn.style.background = '#f39c12';
                bookmarkBtn.style.color = '#fff';
                bookmarkIcon.textContent = 'üìå';
                bookmarkText.textContent = 'Favorilerde';
                
                Swal.fire({
                    title: 'Ba≈üarƒ±lƒ±!',
                    text: 'Yazƒ± favorilere eklendi.',
                    icon: 'success',
                    timer: 1500,
                    showConfirmButton: false
                });
            }
        } else {
            Swal.fire({
                title: 'Hata!',
                text: 'ƒ∞≈ülem ger√ßekle≈ütirilemedi.',
                icon: 'error',
                confirmButtonText: 'Tamam'
            });
        }
    } catch (error) {
        console.error('Bookmark i≈ülemi hatasƒ±:', error);
        Swal.fire({
            title: 'Hata!',
            text: 'Bir hata olu≈ütu. L√ºtfen tekrar deneyin.',
            icon: 'error',
            confirmButtonText: 'Tamam'
        });
    }
}

// Check bookmark status
async function checkBookmarkStatus(postId) {
    if (!postId) return;
    
    try {
        const response = await fetch(`/Blog/IsBookmarked/${postId}`);
        
        if (response.ok) {
            const result = await response.json();
            const bookmarkBtn = document.getElementById('bookmark-btn');
            const bookmarkIcon = document.getElementById('bookmark-icon');
            const bookmarkText = document.getElementById('bookmark-text');
            
            if (result.data === true) {
                bookmarkBtn.classList.add('bookmarked');
                bookmarkBtn.style.background = '#f39c12';
                bookmarkBtn.style.color = '#fff';
                bookmarkIcon.textContent = 'üìå';
                bookmarkText.textContent = 'Favorilerde';
            }
        }
    } catch (error) {
        console.error('Bookmark durumu kontrol√º hatasƒ±:', error);
    }
}

// Copy to clipboard function
function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(function() {
        Swal.fire({
            title: 'Ba≈üarƒ±lƒ±!',
            text: 'Link panoya kopyalandƒ±!',
            icon: 'success',
            timer: 2000,
            showConfirmButton: false
        });
    }, function(err) {
        console.error('Panoya kopyalama hatasƒ±: ', err);
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        Swal.fire({
            title: 'Ba≈üarƒ±lƒ±!',
            text: 'Link panoya kopyalandƒ±!',
            icon: 'success',
            timer: 2000,
            showConfirmButton: false
        });
    });
}

// Like/Unlike function with jQuery
function toggleLike(postId) {
    if (!isUserAuthenticated) {
        Swal.fire({
            title: 'Giri≈ü Yapmanƒ±z Gerekiyor',
            text: 'Beƒüeni yapmak i√ßin l√ºtfen giri≈ü yapƒ±n.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Giri≈ü Yap',
            cancelButtonText: 'Vazge√ß'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '/Auth/Login';
            }
        });
        return;
    }
    const $likeBtn = $('.like-btn');
    const $likeCount = $('.stats-left span:contains("beƒüeni")');
    const isCurrentlyLiked = $likeBtn.hasClass('liked');
    
    // Get current like count
    let currentLikes = parseInt($likeCount.text().match(/\d+/)[0]);
    
    // Optimistic UI update
    if (isCurrentlyLiked) {
        $likeBtn.removeClass('liked')
               .html('‚ù§Ô∏è Beƒüen')
               .css({
                   'background': '#fff',
                   'color': '#333'
               });
        currentLikes--;
    } else {
        $likeBtn.addClass('liked')
               .html('‚ù§Ô∏è Beƒüenildi')
               .css({
                   'background': '#e74c3c',
                   'color': '#fff'
               });
        currentLikes++;
    }
    
    // Update like count in UI
    $likeCount.html(`‚ù§Ô∏è ${currentLikes} beƒüeni`);
    
    // Make API call to toggle like
    const endpoint = isCurrentlyLiked ? `/Blog/UnlikePost/${postId}` : `/Blog/LikePost/${postId}`;
    
    $.ajax({
        url: endpoint,
        method: 'POST',
        contentType: 'application/json',
        success: function(response) {
            // ƒ∞≈ülem ba≈üarƒ±lƒ±, UI zaten g√ºncellenmi≈ü durumda
            Swal.fire({
                title: 'Ba≈üarƒ±lƒ±!',
                text: isCurrentlyLiked ? 'Beƒüeni kaldƒ±rƒ±ldƒ±.' : 'G√∂nderi beƒüenildi!',
                icon: 'success',
                timer: 1000,
                showConfirmButton: false
            });
        },
        error: function(xhr, status, error) {
            console.error('Like i≈ülemi hatasƒ±:', error);
            // Hata durumunda UI'ƒ± eski haline getir
            if (isCurrentlyLiked) {
                $likeBtn.addClass('liked')
                       .html('‚ù§Ô∏è Beƒüenildi')
                       .css({
                           'background': '#e74c3c',
                           'color': '#fff'
                       });
                currentLikes++;
            } else {
                $likeBtn.removeClass('liked')
                       .html('‚ù§Ô∏è Beƒüen')
                       .css({
                           'background': '#fff',
                           'color': '#333'
                       });
                currentLikes--;
            }
            $likeCount.html(`‚ù§Ô∏è ${currentLikes} beƒüeni`);
            
            Swal.fire({
                title: 'Hata!',
                text: 'Beƒüeni i≈ülemi ger√ßekle≈ütirilemedi.',
                icon: 'error',
                confirmButtonText: 'Tamam'
            });
        }
    });
}

// Add Comment function
async function addComment(event) {
    if (!isUserAuthenticated) {
        Swal.fire({
            title: 'Giri≈ü Yapmanƒ±z Gerekiyor',
            text: 'Yorum yapmak i√ßin l√ºtfen giri≈ü yapƒ±n.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Giri≈ü Yap',
            cancelButtonText: 'Vazge√ß'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '/Auth/Login';
            }
        });
        return;
    }
    event.preventDefault();
    
    const postId = '@Model?.Id';
    const content = document.getElementById('commentContent').value.trim();
    
    if (!content) {
        Swal.fire({
            title: 'Hata!',
            text: 'L√ºtfen yorum i√ßeriƒüini girin.',
            icon: 'warning',
            confirmButtonText: 'Tamam'
        });
        return;
    }
    
    try {
        const response = await fetch('/Blog/AddComment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                postId: postId,
                content: content
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            Swal.fire({
                title: 'Ba≈üarƒ±lƒ±!',
                text: 'Yorum ba≈üarƒ±yla eklendi!',
                icon: 'success',
                timer: 2000,
                showConfirmButton: false
            }).then(() => {
                location.reload(); // Refresh to show new comment
            });
        } else {
            Swal.fire({
                title: 'Hata!',
                text: result.message || 'Yorum eklenirken bir hata olu≈ütu.',
                icon: 'error',
                confirmButtonText: 'Tamam'
            });
        }
    } catch (error) {
        console.error('Yorum ekleme hatasƒ±:', error);
        Swal.fire({
            title: 'Hata!',
            text: 'Yorum eklenirken bir hata olu≈ütu.',
            icon: 'error',
            confirmButtonText: 'Tamam'
        });
    }
}

// Reply to Comment function
function replyToComment(commentId) {
    const replyForm = document.getElementById(`replyForm_${commentId}`);
    if (replyForm) {
        replyForm.style.display = replyForm.style.display === 'none' ? 'block' : 'none';
    }
}

// Cancel Reply function
function cancelReply(commentId) {
    const replyForm = document.getElementById(`replyForm_${commentId}`);
    if (replyForm) {
        replyForm.style.display = 'none';
        document.getElementById(`replyContent_${commentId}`).value = '';
    }
}

// Submit Reply function
async function submitReply(parentCommentId) {
    const postId = '@Model?.Id';
    const content = document.getElementById(`replyContent_${parentCommentId}`).value.trim();
    
    if (!content) {
        Swal.fire({
            title: 'Hata!',
            text: 'L√ºtfen yanƒ±t i√ßeriƒüini girin.',
            icon: 'warning',
            confirmButtonText: 'Tamam'
        });
        return;
    }
    
    try {
        const response = await fetch('/Blog/AddComment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                postId: postId,
                content: content,
                parentCommentId: parentCommentId
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            Swal.fire({
                title: 'Ba≈üarƒ±lƒ±!',
                text: 'Yanƒ±t ba≈üarƒ±yla eklendi!',
                icon: 'success',
                timer: 2000,
                showConfirmButton: false
            }).then(() => {
                location.reload(); // Refresh to show new reply
            });
        } else {
            Swal.fire({
                title: 'Hata!',
                text: result.message || 'Yanƒ±t eklenirken bir hata olu≈ütu.',
                icon: 'error',
                confirmButtonText: 'Tamam'
            });
        }
    } catch (error) {
        console.error('Yanƒ±t ekleme hatasƒ±:', error);
        Swal.fire({
            title: 'Hata!',
            text: 'Yanƒ±t eklenirken bir hata olu≈ütu.',
            icon: 'error',
            confirmButtonText: 'Tamam'
        });
    }
}

// Like Comment function
async function likeComment(commentId) {
    // This would be implemented if there's a comment like API
    console.log(`Like comment: ${commentId}`);
    Swal.fire({
        title: 'Bilgi',
        text: 'Yorum beƒüenme √∂zelliƒüi hen√ºz aktif deƒüil.',
        icon: 'info',
        confirmButtonText: 'Tamam'
    });
}

// Scroll to comments function
// Initialize comment like buttons when the page loads
document.addEventListener('DOMContentLoaded', function() {
    // Load like status for all comments
    const likeButtons = document.querySelectorAll('.comment-like-btn, .reply-like-btn');
    likeButtons.forEach(button => {
        const commentId = button.getAttribute('data-comment-id');
        if (commentId) {
            updateCommentLikeStatus(commentId);
        }
    });
});

// Update comment like status from server
async function updateCommentLikeStatus(commentId) {
    try {
        const response = await fetch(`/Blog/CommentLikes/${commentId}`);
        const data = await response.json();
        
        if (data.success) {
            const likeButton = document.querySelector(`.comment-like-btn[data-comment-id="${commentId}"], .reply-like-btn[data-comment-id="${commentId}"]`);
            if (likeButton) {
                likeButton.innerHTML = data.hasLiked ? `‚ù§Ô∏è ${data.likeCount}` : `ü§ç ${data.likeCount}`;
                likeButton.setAttribute('data-liked', data.hasLiked);
                likeButton.style.color = data.hasLiked ? '#ff4757' : '#666';
            }
        }
    } catch (error) {
        console.error('Error updating like status:', error);
    }
}

// Handle like/unlike comment
async function likeComment(commentId) {
    try {
        const isAuthenticated = @(User.Identity?.IsAuthenticated.ToString().ToLower() ?? "false");
        if (!isAuthenticated) {
            Swal.fire({
                title: 'Giri≈ü Yapmanƒ±z Gerekiyor',
                text: 'Yorumlarƒ± beƒüenmek i√ßin l√ºtfen giri≈ü yapƒ±n.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Giri≈ü Yap',
                cancelButtonText: 'ƒ∞ptal'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent(window.location.pathname);
                }
            });
            return;
        }

        const likeButton = document.querySelector(`.comment-like-btn[data-comment-id="${commentId}"], .reply-like-btn[data-comment-id="${commentId}"]`);
        const isLiked = likeButton.getAttribute('data-liked') === 'true';
        
        let response;
        if (isLiked) {
            response = await fetch(`/Blog/UnlikeComment/${commentId}`, { method: 'DELETE' });
        } else {
            response = await fetch(`/Blog/LikeComment/${commentId}`, { method: 'POST' });
        }
        
        const result = await response.json();
        
        if (result.success) {
            // Update the like button
            likeButton.innerHTML = isLiked ? `ü§ç ${result.likeCount}` : `‚ù§Ô∏è ${result.likeCount}`;
            likeButton.setAttribute('data-liked', !isLiked);
            likeButton.style.color = !isLiked ? '#ff4757' : '#666';
            
            // Show success message
            Swal.fire({
                icon: 'success',
                title: 'Ba≈üarƒ±lƒ±!',
                text: isLiked ? 'Beƒüeni kaldƒ±rƒ±ldƒ±' : 'Yorum beƒüenildi',
                timer: 1500,
                showConfirmButton: false
            });
        } else {
            // Show error message
            Swal.fire({
                icon: 'error',
                title: 'Hata!',
                text: result.message || 'Bir hata olu≈ütu',
                timer: 2000,
                showConfirmButton: false
            });
        }
    } catch (error) {
        console.error('Error liking comment:', error);
        Swal.fire({
            icon: 'error',
            title: 'Hata!',
            text: 'Bir hata olu≈ütu. L√ºtfen daha sonra tekrar deneyin.',
            timer: 2000,
            showConfirmButton: false
        });
    }
}

function scrollToComments() {
    // This would scroll to a comments section if it exists
    const commentsSection = document.getElementById('comments-section');
    if (commentsSection) {
        commentsSection.scrollIntoView({ behavior: 'smooth' });
    } else {
        Swal.fire({
            title: 'Hata!',
            text: 'Yorum b√∂l√ºm√º bu sayfada mevcut deƒüil.',
            icon: 'error',
            confirmButtonText: 'Tamam'
        });
    }
}

// Image zoom functionality
document.addEventListener('DOMContentLoaded', function() {
    const images = document.querySelectorAll('.article-image, .content-image');
    images.forEach(img => {
        img.style.cursor = 'zoom-in';
        img.addEventListener('click', function() {
            // Simple image zoom modal
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.9);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 9999;
                cursor: zoom-out;
            `;
            
            const modalImg = document.createElement('img');
            modalImg.src = this.src;
            modalImg.style.cssText = `
                max-width: 90%;
                max-height: 90%;
                object-fit: contain;
            `;
            
            modal.appendChild(modalImg);
            document.body.appendChild(modal);
            
            modal.addEventListener('click', function() {
                document.body.removeChild(modal);
            });
        });
    });
    
    // Add event listener for comment form
    const commentForm = document.getElementById('commentForm');
    if (commentForm) {
        commentForm.addEventListener('submit', addComment);
    }
});
</script>
}
