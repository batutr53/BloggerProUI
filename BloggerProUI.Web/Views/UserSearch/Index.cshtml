@{
    ViewData["Title"] = "Kullanıcı Keşfi";
    Layout = "_Layout";
    ViewData["Description"] = "insanlikHallerimiz topluluğundaki yaratıcı ruhları keşfedin, yeni bağlantılar kurun ve ilham veren içerik üreticilerini takip edin.";
}

<!-- Hero Section -->
<section class="user-discovery-hero">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 mx-auto text-center">
                <h1 class="user-discovery-hero-title">Yaratıcı Ruhları Keşfedin</h1>
                <p class="user-discovery-hero-subtitle">insanlikHallerimiz topluluğundaki ilham veren yazarları, sanatçıları ve düşünürleri bulun</p>
            </div>
        </div>
    </div>
</section>

<!-- Search Section -->
<section class="user-search-section">
    <div class="container">
        <div class="row">
            <div class="col-lg-10 col-xl-8 mx-auto">
                <!-- Search Box -->
                <div class="user-search-container">
                    <div class="user-search-box-wrapper">
                        <div class="user-search-icon">
                            <i class="fas fa-search"></i>
                        </div>
                        <input type="text" 
                               id="searchInput" 
                               class="user-search-input" 
                               placeholder="Ad, soyad veya kullanıcı adı ile arama yapın..."
                               autocomplete="off">
                        <div class="user-search-loading" id="searchLoading" style="display: none;">
                            <div class="user-spinner"></div>
                        </div>
                    </div>
                    
                    <!-- Search Filters -->
                    <div class="user-search-filters">
                        <label class="user-search-filter-option">
                            <input type="checkbox" id="mutualOnly" checked>
                            <span class="user-search-checkmark"></span>
                            <span class="filter-text">Karşılıklı takipçiler öncelikli</span>
                        </label>
                    </div>
                </div>

                <!-- Search Results -->
                <div id="searchResults" class="user-search-results-container">
                    <!-- Results will appear here -->
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Recommendations Section -->
<section class="user-recommendations-section">
    <div class="container">
        <div class="row">
            <div class="col-lg-10 col-xl-8 mx-auto">
                <div class="user-recommendations-header">
                    <h2 class="user-recommendations-title">Size Önerilen Yaratıcılar</h2>
                    <p class="user-recommendations-subtitle">Benzer ilgi alanlarına sahip kullanıcıları keşfedin</p>
                </div>
                
                <div id="recommendationsContainer" class="user-recommendations-grid">
                    <div class="user-loading-state">
                        <div class="user-loading-spinner">
                            <div class="user-spinner"></div>
                        </div>
                        <p>Öneriler yükleniyor...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- User Profile Modal -->
<div class="modal fade" id="userProfileModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Kullanıcı Profili</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="userProfileContent">
                <!-- User profile content will be loaded here -->
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        (function() {
            'use strict';
            
            let searchTimeout;
            
            // Check if jQuery is loaded
            if (typeof $ === 'undefined') {
                console.error('jQuery not loaded in UserSearch');
                return;
            }
            
            $(document).ready(function() {
                console.log('UserSearch page initialized');
                loadRecommendations();
                
                // Search input with debounce
                $('#searchInput').on('input', function() {
                    clearTimeout(searchTimeout);
                    const query = $(this).val().trim();
                    console.log('Search input:', query);
                    
                    if (query.length < 2) {
                        $('#searchResults').empty();
                        return;
                    }
                    
                    searchTimeout = setTimeout(() => {
                        performSearch(query);
                    }, 300);
                });
                
                // Search button click
                $('#searchButton').on('click', function() {
                    console.log('Search button clicked');
                    const query = $('#searchInput').val().trim();
                    if (query.length >= 2) {
                        performSearch(query);
                    }
                });
                
                // Enter key search
                $('#searchInput').on('keypress', function(e) {
                    if (e.which === 13) {
                        console.log('Enter key pressed');
                        const query = $(this).val().trim();
                        if (query.length >= 2) {
                            performSearch(query);
                        }
                    }
                });
            });
            
            function performSearch(query) {
                console.log('Performing search for:', query);
                showSearchLoading(true);
                const mutual = $('#mutualOnly').is(':checked');
                
                $.get('/UserSearch/Search', { q: query, mutual: mutual, limit: 20 })
                    .done(function(response) {
                        console.log('Search response:', response);
                        showSearchLoading(false);
                        displaySearchResults(response.data || []);
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Search failed:', xhr, status, error);
                        showSearchLoading(false);
                        displaySearchError();
                    });
            }
            
            function loadRecommendations() {
                console.log('Loading recommendations');
                $.get('/UserSearch/Recommendations', { limit: 12 })
                    .done(function(response) {
                        displayRecommendations(response.data || []);
                    })
                    .fail(function() {
                        displayRecommendationsError();
                    });
            }
        
            function displaySearchResults(users) {
                if (users.length === 0) {
                    $('#searchResults').html(createEmptySearchState());
                    return;
                }
                
                let html = '<div class="user-search-results-list">';
                users.forEach(user => {
                    html += createSearchResultItem(user);
                });
                html += '</div>';
                
                $('#searchResults').html(html);
            }
            
            function displayRecommendations(users) {
                if (users.length === 0) {
                    $('#recommendationsContainer').html(createEmptyRecommendationsState());
                    return;
                }
                
                let html = '';
                users.forEach(user => {
                    html += createUserCard(user, 'recommendation');
                });
                
                $('#recommendationsContainer').html(html);
            }
            
            function createSearchResultItem(user) {
                const profileImageUrl = user.profileImageUrl || user.profilePicture || '/images/default-avatar.png';
                const displayName = user.displayName || user.userName;
                const mutualText = user.mutualConnections > 0 ? 
                    '<span class="user-search-result-mutual">' + user.mutualConnections + ' ortak takipçi</span>' : '';
                
                return '<div class="user-search-result-item">' +
                    '<img src="' + profileImageUrl + '" ' +
                         'alt="' + displayName + '" ' +
                         'class="user-search-result-avatar">' +
                    '<div class="user-search-result-info">' +
                        '<div class="user-search-result-name">' + displayName + '</div>' +
                        '<div class="user-search-result-username">@@' + user.userName + '</div>' +
                        mutualText +
                    '</div>' +
                    '<div class="user-search-result-actions">' +
                        (user.isFollowing ? 
                            '<button class="user-btn-modern user-btn-success-modern" disabled>' +
                                '<i class="fas fa-check"></i>Takip Ediliyor' +
                            '</button>' :
                            '<button class="user-btn-modern user-btn-primary-modern" ' +
                                    'onclick="followUser(\'' + user.id + '\', this)">' +
                                '<i class="fas fa-user-plus"></i>Takip Et' +
                            '</button>') +
                        '<button class="user-btn-modern user-btn-outline-modern" ' +
                                'onclick="startChat(\'' + user.id + '\')">' +
                            '<i class="fas fa-comment"></i>Mesaj' +
                        '</button>' +
                    '</div>' +
                '</div>';
            }
            
            function createUserCard(user, type) {
                const profileImageUrl = user.profileImageUrl || user.profilePicture || '/images/default-avatar.png';
                const displayName = user.displayName || user.userName;
                const reasonBadge = type === 'recommendation' && user.reason ? 
                    '<div class="user-recommendation-badge">' + user.reason + '</div>' : '';
                
                const mutualStats = user.mutualConnections > 0 ? 
                    '<span>' + user.mutualConnections + ' ortak takipçi</span>' : '';
                
                return '<div class="user-discovery-card">' +
                    reasonBadge +
                    '<div class="user-discovery-info">' +
                        '<img src="' + profileImageUrl + '" ' +
                             'alt="' + displayName + '" ' +
                             'class="user-discovery-avatar">' +
                        '<div class="user-discovery-name">' + displayName + '</div>' +
                        '<div class="user-discovery-username">@@' + user.userName + '</div>' +
                        (user.bio ? '<div class="user-discovery-bio">' + user.bio + '</div>' : '') +
                        (mutualStats ? '<div class="user-discovery-stats">' + mutualStats + '</div>' : '') +
                    '</div>' +
                    '<div class="user-discovery-actions">' +
                        (user.isFollowing ? 
                            '<button class="user-btn-modern user-btn-success-modern" disabled>' +
                                '<i class="fas fa-check"></i>Takip Ediliyor' +
                            '</button>' :
                            '<button class="user-btn-modern user-btn-primary-modern" ' +
                                    'onclick="followUser(\'' + user.id + '\', this)">' +
                                '<i class="fas fa-user-plus"></i>Takip Et' +
                            '</button>') +
                        '<button class="user-btn-modern user-btn-outline-modern" ' +
                                'onclick="startChat(\'' + user.id + '\')">' +
                            '<i class="fas fa-comment"></i>Mesaj' +
                        '</button>' +
                    '</div>' +
                '</div>';
            }
            
            function createEmptySearchState() {
                return '<div class="user-empty-state">' +
                    '<div class="user-empty-state-icon"><i class="fas fa-search"></i></div>' +
                    '<div class="user-empty-state-title">Sonuç bulunamadı</div>' +
                    '<div class="user-empty-state-text">Arama kriterlerinize uygun kullanıcı bulunamadı. Farklı anahtar kelimeler deneyin.</div>' +
                '</div>';
            }
            
            function createEmptyRecommendationsState() {
                return '<div class="user-empty-state">' +
                    '<div class="user-empty-state-icon"><i class="fas fa-users"></i></div>' +
                    '<div class="user-empty-state-title">Öneri bulunamadı</div>' +
                    '<div class="user-empty-state-text">Şu anda size önerebileceğimiz kullanıcı bulunmuyor. Daha fazla kişiyi takip ettikçe öneriler gelişecek.</div>' +
                '</div>';
            }
            
            function displaySearchError() {
                $('#searchResults').html(
                    '<div class="user-empty-state">' +
                        '<div class="user-empty-state-icon"><i class="fas fa-exclamation-triangle"></i></div>' +
                        '<div class="user-empty-state-title">Arama hatası</div>' +
                        '<div class="user-empty-state-text">Arama sırasında bir hata oluştu. Lütfen tekrar deneyin.</div>' +
                    '</div>'
                );
            }
            
            function displayRecommendationsError() {
                $('#recommendationsContainer').html(
                    '<div class="user-empty-state">' +
                        '<div class="user-empty-state-icon"><i class="fas fa-exclamation-triangle"></i></div>' +
                        '<div class="user-empty-state-title">Yükleme hatası</div>' +
                        '<div class="user-empty-state-text">Öneriler yüklenirken hata oluştu. Sayfayı yenileyin.</div>' +
                    '</div>'
                );
            }
        
        function followUser(userId, button) {
            const $button = $(button);
            const originalHtml = $button.html();
            
            $button.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i>');
            
            $.post('/UserSearch/Follow', { userId: userId })
                .done(function(response) {
                    if (response.success) {
                        $button.removeClass('btn-primary')
                               .addClass('btn-success')
                               .html('<i class="fas fa-check me-1"></i>Takip Ediliyor')
                               .prop('disabled', true);
                        
                        // Show success message
                        showNotification('Kullanıcı başarıyla takip edildi!', 'success');
                    } else {
                        $button.prop('disabled', false).html(originalHtml);
                        showNotification(response.message || 'Takip etme işlemi başarısız.', 'error');
                    }
                })
                .fail(function() {
                    $button.prop('disabled', false).html(originalHtml);
                    showNotification('Takip etme işlemi sırasında hata oluştu.', 'error');
                });
            }
            
            function startChat(userId) {
                window.location.href = '/Chat/Conversation/' + userId;
            }
            
            function showSearchLoading(show) {
                if (show) {
                    $('#searchLoading').show();
                    $('#searchResults').empty();
                } else {
                    $('#searchLoading').hide();
                }
            }
            
            function showNotification(message, type) {
                const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
                const notification = 
                    '<div class="alert ' + alertClass + ' alert-dismissible fade show" role="alert">' +
                        message +
                        '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
                    '</div>';
                
                // Prepend to the container and auto-dismiss after 3 seconds
                $('.container').prepend(notification);
                setTimeout(() => {
                    $('.alert').alert('close');
                }, 3000);
            }
        })(); // IIFE kapanışı
    </script>
}